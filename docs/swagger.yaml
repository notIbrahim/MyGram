basePath: /
host: localhost:8087
info:
  contact:
    email: togi.mare@gmail.com
    name: API Support
    url: http://www.swagger.io/support
  description: |-
    Documentation MyGram using Gin Framework
    inorder to use this api there bearer token which some of function are needed
    First you need regis and login
    Then Click "Authorize" at right and there pop-up will be appear and input your token and it will reveal true token e.g "Bearer e4udqw923....."
    Finally you can use some of function that already state before
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: "API Documentation\tMyGram"
  version: "0.1"
paths:
  /socials/:
    get:
      description: |
        MyGram Social Media function for check all user status who been registered without login known as incognito
      produces:
      - application/json
      responses:
        "302":
          description: Found
        "404":
          description: Not Found
      summary: MyGram Function Social Media
      tags:
      - SocialQueries
  /socials/{ID}:
    get:
      description: |
        MyGram Social Media function for check one status of a user without login known as incognito
      parameters:
      - description: Social Media ID it means what iterations are you looking for
        in: formData
        name: ID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "302":
          description: Found
        "404":
          description: Not Found
      summary: MyGram Function Social Media
      tags:
      - SocialQueries
  /users/login:
    post:
      description: User Login for user who are registered
      parameters:
      - description: Your Email are needed in order to login
        in: formData
        name: email
        required: true
        type: string
      - description: Your password are needed in order to login
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
      summary: User Login
      tags:
      - UserQueries
  /users/register:
    post:
      description: Well Obviously it User Registration
      parameters:
      - description: Your Email address registered
        in: formData
        name: email
        required: true
        type: string
      - description: Your password registered
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: User Registration
      tags:
      - UserQueries
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
